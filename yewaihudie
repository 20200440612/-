import os
import zipfile

#解压数据集
os.chdir('/home/aistudio/data/data90914')
extracting = zipfile.ZipFile('TrainData.zip')
extracting.extractall('/home/aistudio/data')

#解压标注文档
os.chdir('/home/aistudio/train_xml')
extracting = zipfile.ZipFile('Annotations.zip')
extracting.extractall('/home/aistudio/data')

import matplotlib.pyplot as plt
import PIL.Image as Image

path='/home/aistudio/data/JPEGImages/IMG_000719.jpg'
img = Image.open(path)
plt.imshow(img)          #根据数组绘制图像
plt.show()               #显示图像

#查看dir中的第二个元素(index=1)
tree = ET.parse(source + '/' + dir[1])
rect = {}
line = ""
root = tree.getroot()
for i in root:
    print(i)
    
    
    for i in root.iter('object'):
    print(i)
    for j in i.iter('bndbox'):
        print(j)
        
 #清空temp.txt文档
with open('/home/aistudio/work/temp.txt', 'w') as fc:
    fc.seek(0)
    fc.truncate()
    print("清空数据")
    
    for i in range(len(dir)):
    tree = ET.parse(source + '/' + dir[i])
    rect = {}
    line = ""
    root = tree.getroot()
    with open('/home/aistudio/work/temp.txt', 'a', encoding='utf-8') as f1:
        
        for ob in root.iter('object'):
            # 文本信息，这个循环应该在for bndbox 外面的，才合理
            for t in ob.iter('name'):
                print(t.text)
                f1.write(t.text + '\n')

#去重
# -*- coding:utf-8 -*-
#! python2
import shutil
a = 0

readDir = '/home/aistudio/work/temp.txt'  #old
writeDir = '/home/aistudio/work/label.txt' #new
# txtDir = "/home/Administrator/Desktop/１"
lines_seen = set()
outfile = open(writeDir, 'w')
f = open(readDir, 'r')
for line in f:
    if line not in lines_seen:
        a += 1
        outfile.write(line)
        lines_seen.add(line)
        print(a)
outfile.close()
print("success")

from random import shuffle, seed
 import os
 #base = '/root/paddlejob/workspace/code/VOC2007/'

 anos = os.listdir('/home/aistudio/data/Annotations')
 print('total:', len(anos))

 #seed(666)
 #shuffle(anos) #打乱顺序
print(anos)

#训练集txt
with open('/home/aistudio/work/train.txt', 'w') as f:
     for im in anos[:(len(anos)-150)]:
         info = 'JPEGImages/'+im[:-4]+'.jpg' +' '
         info += 'Annotations/'+im+'\n'
         f.write(info)
         
         #标签
CLASSES = ['person']

 with open('/home/aistudio/work/label_list.txt', 'w+') as f:
     for v in CLASSES:
         print(v)
         f.write(v+'\n')
         
    train_dataset = pdx.datasets.VOCDetection(
    data_dir='/home/aistudio/data',
    file_list='/home/aistudio/work/train.txt',
    label_list='/home/aistudio/work/label.txt',
    transforms=train_transforms,
    shuffle=True)
eval_dataset = pdx.datasets.VOCDetection(
    data_dir='/home/aistudio/data',
    file_list='/home/aistudio/work/val.txt',
    label_list='/home/aistudio/work/label.txt',
    transforms=eval_transforms)
    
# 训练可视化VisualDL工具的回调函数
#visualdl = paddle.callbacks.VisualDL(log_dir='visualdl_log')

num_classes = len(train_dataset.labels) + 1
print(num_classes)
model = pdx.det.FasterRCNN(num_classes=num_classes)
model.train(
    num_epochs=36,
    train_dataset=train_dataset,
    train_batch_size=8,
    eval_dataset=eval_dataset,
    learning_rate=0.0010,
    lr_decay_epochs=[16, 22],
    save_interval_epochs=6,
    save_dir='/home/aistudio/faster_rcnn_r50_fpn',
    use_vdl=True)
#use_vdl=True  设置use_vdl=true后会报错
#save_dir='output/faster_rcnn_r50_fpn',

import paddlex as pdx

#model = pdx.load_model('/home/aistudio/faster_rcnn_r50_fpn/epoch_42')
model = pdx.load_model('/home/aistudio/model/epoch_24')



result = model.predict(image_name)
pdx.det.visualize(image_name, result, threshold=0.4, save_dir='/home/aistudio/work/output1')
#print(result[0])
for r in result:
    if (r['score'] > 0.4):
        #print(r['category'])
        #print(r['score'] )
        #print(r)
        print(r['category'],":",r['score'])
        

import paddlex as pdx
import os
#model = pdx.load_model('/home/aistudio/faster_rcnn_r50_fpn/epoch_42')
model = pdx.load_model('/home/aistudio/model/epoch_24')

#图片名
base='/home/aistudio/work/test/' #目标所在文件夹
img_names = os.listdir(base)
print(img_names)
#图片路径列表
file_list = [os.path.join(base,file) for file in img_names]
print(file_list)

results=batch_predict(file_list)
